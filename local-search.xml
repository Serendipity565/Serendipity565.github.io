<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/20/hello-world/"/>
    <url>/2024/09/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>树状数组</title>
    <link href="/2024/07/24/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    <url>/2024/07/24/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="简介">简介</h1><p>树状数组是一种支持 <strong>单点修改</strong> 和 <strong>区间查询</strong> 的，代码量小的数据结构。</p><p>普通树状数组维护的信息及运算要满足 <strong>结合律</strong> 且 <strong>可差分</strong>，如加法（和）、乘法（积）、异或等。</p><p>事实上，树状数组能解决的问题是线段树能解决的问题的子集：树状数组能做的，线段树一定能做；线段树能做的，树状数组不一定可以。然而，树状数组的代码要远比线段树短，时间效率常数也更小。</p><p>有时，在差分数组和辅助数组的帮助下，树状数组还可解决更强的 <strong>区间加单点值</strong> 和 <strong>区间加区间和</strong> 问题。</p><p>树状数组能快速求解信息的原因：我们总能将一段前缀 <spanclass="math inline">\([1,n]\)</span> 拆成 不多于 <spanclass="math inline">\(log\ n\)</span> 段区间，使得这 <spanclass="math inline">\(log\ n\)</span> 段区间的信息是已知的。</p><p>于是，我们只需合并这 <span class="math inline">\(log\ n\)</span>段区间的信息，就可以得到答案。相比于原来直接合并 <spanclass="math inline">\(n\)</span> 个信息，效率有了很大的提高。</p><p>不难发现信息必须满足结合律，否则就不能像上面这样合并了。</p><p><img src="img/blog/szsz/1.png" /></p><h2 id="管辖区间">管辖区间</h2><p>树状数组中，规定 <span class="math inline">\(c[x]\)</span>管辖的区间长度为 <span class="math inline">\(2^k\)</span> ，其中：</p><ul><li>设二进制最低位为第 <span class="math inline">\(0\)</span> 位，则<span class="math inline">\(k\)</span> 恰好为二进制表示中，最低位的<span class="math inline">\(1\)</span> 所在的二进制位数。</li><li><span class="math inline">\(2^k\)</span>（ <spanclass="math inline">\(c[x]\)</span> 的管辖区间长度）恰好为 <spanclass="math inline">\(x\)</span> 二进制表示中，最低位的 <spanclass="math inline">\(1\)</span> 以及后面所有 <spanclass="math inline">\(0\)</span> 组成的数。</li></ul><p>举个例子，<span class="math inline">\(c_{88}\)</span>管辖的是哪个区间? 因为 <span class="math inline">\(88_{(10)} =01011000_{(2)}\)</span>，其二进制最低位的 <spanclass="math inline">\(1\)</span> 以及后面的 <spanclass="math inline">\(0\)</span> 组成的二进制是 <spanclass="math inline">\(1000\)</span> ，即 <spanclass="math inline">\(8\)</span> ，所以 <spanclass="math inline">\(c_{88}\)</span> 管辖 <spanclass="math inline">\(8\)</span> 个 <spanclass="math inline">\(a\)</span> 数组中的元素。因此，<spanclass="math inline">\(c_{88}\)</span> 代表 <spanclass="math inline">\(a[81...88]\)</span> 的区间信息。</p><p>我们记：<span class="math inline">\(x\)</span> 二进制最低位 <spanclass="math inline">\(1\)</span> 以及后面的 <spanclass="math inline">\(0\)</span> 组成的数为 <spanclass="math inline">\(lowbit(a)\)</span>，那么 <spanclass="math inline">\(c[x]\)</span> 管辖的区间就是 <spanclass="math inline">\([x-lowbit(x)+ 1,x]\)</span>。</p><p><strong>这里注意：lowbit 指的不是最低位 <spanclass="math inline">\(1\)</span> 所在的位数 <spanclass="math inline">\(k\)</span> ，而是这个 <spanclass="math inline">\(1\)</span> 和后面所有 <spanclass="math inline">\(0\)</span> 组成的 <spanclass="math inline">\(2^k\)</span>。</strong></p><p>实现代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; (-x);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="区间查询">区间查询</h2><p><span class="math inline">\(c\)</span> 数组是用来储存原始数组 <spanclass="math inline">\(a\)</span>某段区间的和的，也就是说，这些区间的信息是已知的，我们的目标就是把查询前缀拆成这些小区间。</p><p>举例：计算 <span class="math inline">\(a[4...7]\)</span> 的和。</p><p>我们还是从 <span class="math inline">\(c_7\)</span> 开始跳，跳到<span class="math inline">\(c_6\)</span> 再跳到 <spanclass="math inline">\(c_4\)</span> 。此时我们发现它管理了 <spanclass="math inline">\(a[1...4]\)</span> 的和，但是我们不想 要 <spanclass="math inline">\(a[1...3]\)</span> 这一部分，怎么办呢？很简单，减去<span class="math inline">\(a[1...3]\)</span> 的和就行了。</p><p>那不妨考虑最开始，就将査询 <spanclass="math inline">\(a[4...7]\)</span> 的和转化为査询 <spanclass="math inline">\(a[1...7]\)</span> 的和，以及査询 <spanclass="math inline">\(a[1...3]\)</span> 的和，最终将两个结果作差。</p><p><img src="img/blog/szsz/2.png" /></p><p>其实任何一个区间査询都可以这么做：査询 <spanclass="math inline">\(a[l...r]\)</span> 的和，就是 <spanclass="math inline">\(a[1...r]\)</span> 的和减去 <spanclass="math inline">\(a[1..l-1]\)</span>的和，从而把区间问题转化为前缀问题，更方便处理。 我们可以写出査询 <spanclass="math inline">\(a[1...x]\)</span> 的过程:</p><ul><li>从 <span class="math inline">\(c[x]\)</span> 开始往前跳，有 <spanclass="math inline">\(c[x]\)</span> 管辖 <spanclass="math inline">\(a[x-lowbit(x)+ 1...x]\)</span>。</li><li>令<span class="math inline">\(x←x-lowbit(x)\)</span>，如果 <spanclass="math inline">\(x=0\)</span>说明已经跳到尽头了，终止循环，否则回到第一步</li><li>将跳到的c合并。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getsum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">// 整体前缀和</span></span><br><span class="hljs-function"></span>&#123;<br>    ll tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        tot += tr[x];<br>        x -= <span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> tot;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> <span class="hljs-comment">// 区间查询</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">getsum</span>(r) - <span class="hljs-built_in">getsum</span>(l - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="单点修改">单点修改</h2><p>设 <span class="math inline">\(n\)</span> 表示 <spanclass="math inline">\(a\)</span> 的大小，不难写出单点修改 <spanclass="math inline">\(a[x]\)</span> 的过程：</p><ul><li>初始令 <span class="math inline">\(x&#39;=x\)</span> 。</li><li>修改 <span class="math inline">\(c[x&#39;]\)</span>。</li><li>令 <span class="math inline">\(x&#39; ← x&#39;+lowbit(x&#39;)\)</span>，如果 <spanclass="math inline">\(x&#39;&gt;n\)</span>说明已经跳到尽头了，终止循环，否则回到第二步。</li></ul><p>区间信息和单点修改的种类，共同决定 <spanclass="math inline">\(c[x&#39;]\)</span>的修改方式。下面给几个例子：</p><ul><li>若 <span class="math inline">\(c[x&#39;]\)</span>维护区间和，修改种类是将 <span class="math inline">\(a[x]\)</span> 加上<span class="math inline">\(p\)</span>，则修改方式则是将所有 <spanclass="math inline">\(c[x&#39;]\)</span> 也加上 <spanclass="math inline">\(p\)</span>。</li><li>若 <span class="math inline">\(c[x&#39;]\)</span>维护区间积，修改种类是将 <span class="math inline">\(a[x]\)</span> 乘上<span class="math inline">\(p\)</span>，则修改方式则是将所有 <spanclass="math inline">\(c[x&#39;]\)</span> 也乘上 <spanclass="math inline">\(p\)</span>。</li></ul><p>实现代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> k)</span> <span class="hljs-comment">// 单点修改</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (x &lt;= n)<br>    &#123;<br>        tr[x] += k;<br>        x += <span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="建树">建树</h2><p>也就是根据最开始给出的序列，将树状数组建出来（c全部预处理好）</p><p>一般可以直接转化为 <span class="math inline">\(n\)</span>次单点修改，时间复杂度 <span class="math inline">\(O(n\ log\n)\)</span>。</p><h3 id="on建树"><span class="math inline">\(O(n)\)</span>建树</h3><p>以维护区间和为例。</p><p><strong>方法一：</strong></p><p>每一个节点的值是由所有与自己直接相连的儿子的值求和得到的。因此可以倒着考虑贡献，即每次确定完儿子的值后，用自己的值更新自己的直接父亲。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        t[i] += a[i];<br>        <span class="hljs-type">int</span> j = i + <span class="hljs-built_in">lowbit</span>(i);<br>        <span class="hljs-keyword">if</span> (j &lt;= n) t[j] += t[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法二：</strong></p><p>前面讲到 <span class="math inline">\(c_i\)</span> 表示的区间是 <spanclass="math inline">\([i-lowbit(i)+1,i]\)</span>，那么我们可以先预处理一个<span class="math inline">\(sum\)</span> 前缀和数组，再计算 <spanclass="math inline">\(c\)</span> 数组。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        t[i] = sum[i] - sum[i - <span class="hljs-built_in">lowbit</span>(i)];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="模板例题">模板例题</h1><h3 id="单点修改与区间查询">单点修改与区间查询</h3><p><a href="https://www.luogu.com.cn/problem/P3374">【模板】树状数组 1 -洛谷</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br>ll n, m;<br>ll tr[<span class="hljs-number">500005</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; (-x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> k)</span> <span class="hljs-comment">// 单点修改</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (x &lt;= n)<br>    &#123;<br>        tr[x] += k;<br>        x += <span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getsum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">// 整体前缀和</span></span><br><span class="hljs-function"></span>&#123;<br>    ll tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        tot += tr[x];<br>        x -= <span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> tot;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> <span class="hljs-comment">// 区间查询</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">getsum</span>(r) - <span class="hljs-built_in">getsum</span>(l - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-type">int</span> temp;<br><br>    <span class="hljs-comment">// 建树状数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; temp;<br>        <span class="hljs-built_in">update</span>(i, temp);<br>    &#125;<br><br>    <span class="hljs-comment">// 接下来m次操作</span><br>    <span class="hljs-type">int</span> op;<br>    <span class="hljs-type">int</span> x, y;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">update</span>(x, y);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout &lt;&lt; <span class="hljs-built_in">query</span>(x, y) &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t;<br>    t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="区间修改与单点查询">区间修改与单点查询</h3><p><a href="https://www.luogu.com.cn/problem/P3368">【模板】树状数组 2 -洛谷</a></p><p>我们用树状数组保存差分即可实现区间修改。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br>ll n;<br>ll a[<span class="hljs-number">500005</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>ll tr[<span class="hljs-number">500005</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cout &lt;&lt; tr[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; (-x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> k)</span> <span class="hljs-comment">// 树状数组保存差分信息</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (x &lt;= n)<br>    &#123;<br>        tr[x] += k;<br>        x += <span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getsum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">// 整体前缀和，差分和</span></span><br><span class="hljs-function"></span>&#123;<br>    ll tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        tot += tr[x];<br>        x -= <span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> tot;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    ll temp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-type">int</span> op;<br>    ll x, y;<br>    ll k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        cin &gt;&gt; op;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>        &#123;<br>            cin &gt;&gt; x &gt;&gt; y &gt;&gt; k;<br>            <span class="hljs-built_in">update</span>(x, k);<br>            <span class="hljs-built_in">update</span>(y + <span class="hljs-number">1</span>, -k);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cin &gt;&gt; x;<br>            cout &lt;&lt; <span class="hljs-built_in">getsum</span>(x) + a[x] &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t;<br>    t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一个写法是树状数组存相邻个两数之间的差值，在此不做演示。</p><h3 id="二维树状数组">二维树状数组</h3><p><a href="https://www.luogu.com.cn/problem/P4054">[JSOI2009] 计数问题- 洛谷</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> n, m;<br>ll a[<span class="hljs-number">305</span>][<span class="hljs-number">305</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>ll tr[<span class="hljs-number">305</span>][<span class="hljs-number">305</span>][<span class="hljs-number">105</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; (-x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;= n; i += <span class="hljs-built_in">lowbit</span>(i))<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = y; j &lt;= m; j += <span class="hljs-built_in">lowbit</span>(j))<br>        &#123;<br>            tr[i][j][c] += k;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getsum</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &gt; <span class="hljs-number">0</span>; i -= <span class="hljs-built_in">lowbit</span>(i))<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = y; j &gt; <span class="hljs-number">0</span>; j -= <span class="hljs-built_in">lowbit</span>(j))<br>        &#123;<br>            tot += tr[i][j][c];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> tot;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x0, <span class="hljs-type">int</span> y0, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">getsum</span>(x2, y2, c) - <span class="hljs-built_in">getsum</span>(x0 - <span class="hljs-number">1</span>, y2, c) - <span class="hljs-built_in">getsum</span>(x2, y0 - <span class="hljs-number">1</span>, c) + <span class="hljs-built_in">getsum</span>(x0 - <span class="hljs-number">1</span>, y0 - <span class="hljs-number">1</span>, c);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    <span class="hljs-comment">// 建树状数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>        &#123;<br>            cin &gt;&gt; a[i][j];<br>            <span class="hljs-built_in">update</span>(i, j, a[i][j], <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> q;<br>    cin &gt;&gt; q;<br>    <span class="hljs-type">int</span> x, y, c;<br>    <span class="hljs-type">int</span> op;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; i++)<br>    &#123;<br>        cin &gt;&gt; op;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>        &#123;<br>            cin &gt;&gt; x &gt;&gt; y &gt;&gt; c;<br>            <span class="hljs-built_in">update</span>(x, y, a[x][y], <span class="hljs-number">-1</span>);<br>            a[x][y] = c;<br>            <span class="hljs-built_in">update</span>(x, y, c, <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> x1, y1, x2, y2;<br>            cin &gt;&gt; x1 &gt;&gt; x2 &gt;&gt; y1 &gt;&gt; y2 &gt;&gt; c;<br>            cout &lt;&lt; <span class="hljs-built_in">query</span>(x1, y1, x2, y2, c) &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t;<br>    t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二维树状数组差分">二维树状数组差分</h3><p><a href="https://www.luogu.com.cn/problem/P4514">上帝造题的七分钟 -洛谷</a></p><p>由二维差分的知识可知，我们需要维护四个数组。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">debug</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; (-x);<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">P</span><br>&#123;<br>    <span class="hljs-type">int</span> tr[<span class="hljs-number">2050</span>][<span class="hljs-number">2050</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">while</span> (x &lt;= n)<br>        &#123;<br>            <span class="hljs-type">int</span> a = y;<br>            <span class="hljs-keyword">while</span> (a &lt;= m)<br>            &#123;<br>                tr[x][a] += k;<br>                a += <span class="hljs-built_in">lowbit</span>(a);<br>            &#125;<br>            x += <span class="hljs-built_in">lowbit</span>(x);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getsum</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (x &gt;= <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> a = y;<br>            <span class="hljs-keyword">while</span> (a &gt;= <span class="hljs-number">1</span>)<br>            &#123;<br>                ans += tr[x][a];<br>                a -= <span class="hljs-built_in">lowbit</span>(a);<br>            &#125;<br>            x -= <span class="hljs-built_in">lowbit</span>(x);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125; my1, my2, my3, my4; <span class="hljs-comment">// 分别维护tr[i][j],tr[i][j]*i,tr[i][j]*j,tr[i][j]*i*j;</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updateall</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    my<span class="hljs-number">1.</span><span class="hljs-built_in">update</span>(x, y, k);<br>    my<span class="hljs-number">2.</span><span class="hljs-built_in">update</span>(x, y, k * x);<br>    my<span class="hljs-number">3.</span><span class="hljs-built_in">update</span>(x, y, k * y);<br>    my<span class="hljs-number">4.</span><span class="hljs-built_in">update</span>(x, y, k * x * y);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getsumall</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    ans += my<span class="hljs-number">1.</span><span class="hljs-built_in">getsum</span>(x, y) * (x * y + x + y + <span class="hljs-number">1</span>);<br>    ans -= my<span class="hljs-number">2.</span><span class="hljs-built_in">getsum</span>(x, y) * (y + <span class="hljs-number">1</span>);<br>    ans -= my<span class="hljs-number">3.</span><span class="hljs-built_in">getsum</span>(x, y) * (x + <span class="hljs-number">1</span>);<br>    ans += my<span class="hljs-number">4.</span><span class="hljs-built_in">getsum</span>(x, y);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> op;<br>    cin &gt;&gt; op &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-type">int</span> a, b, c, d, k;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; op)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;L&#x27;</span>)<br>        &#123;<br>            cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; k;<br>            <span class="hljs-built_in">updateall</span>(a, b, k);<br>            <span class="hljs-built_in">updateall</span>(a, d + <span class="hljs-number">1</span>, -k);<br>            <span class="hljs-built_in">updateall</span>(c + <span class="hljs-number">1</span>, b, -k);<br>            <span class="hljs-built_in">updateall</span>(c + <span class="hljs-number">1</span>, d + <span class="hljs-number">1</span>, k);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;k&#x27;</span>)<br>        &#123;<br>            cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;<br>            cout &lt;&lt; <span class="hljs-built_in">getsumall</span>(c, d) - <span class="hljs-built_in">getsumall</span>(a - <span class="hljs-number">1</span>, d) - <span class="hljs-built_in">getsumall</span>(c, b - <span class="hljs-number">1</span>) + <span class="hljs-built_in">getsumall</span>(a - <span class="hljs-number">1</span>, b - <span class="hljs-number">1</span>) &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t;<br>    t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="树状数组求逆序对">树状数组求逆序对</h3><p><a href="https://www.luogu.com.cn/problem/P1908">逆序对 -洛谷</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> tr[<span class="hljs-number">500005</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">P</span><br>&#123;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">int</span> id;<br>&#125; a[<span class="hljs-number">500005</span>];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(P a1, P a2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (a<span class="hljs-number">1.</span>num == a<span class="hljs-number">2.</span>num)<br>    &#123;<br>        <span class="hljs-keyword">return</span> a<span class="hljs-number">1.</span>id &gt; a<span class="hljs-number">2.</span>id;<br>    &#125;<br> <span class="hljs-keyword">return</span> a<span class="hljs-number">1.</span>num &gt; a<span class="hljs-number">2.</span>num;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; (-x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (x &lt;= n)<br>    &#123;<br>        tr[x] += k;<br>        x += <span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getsum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        tot += tr[x];<br>        x -= <span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> tot;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; a[i].num; <span class="hljs-comment">// 当前数字</span><br>        a[i].id = i;  <span class="hljs-comment">// 数字对应的下标</span><br>    &#125;<br>    <span class="hljs-comment">// 实现降序排列，数值大的在前面</span><br>    <span class="hljs-built_in">sort</span>(a + <span class="hljs-number">1</span>, a + n + <span class="hljs-number">1</span>, cmp);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">update</span>(a[i].id, <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 对于这个数而言，比他大的数都已经在数组内，只需查询下表比他小的即可</span><br>        ans += <span class="hljs-built_in">getsum</span>(a[i].id - <span class="hljs-number">1</span>);<br>    &#125;<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t;<br>    t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>贪心算法</title>
    <link href="/2023/11/11/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <url>/2023/11/11/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍">介绍</h1><p><strong>贪心算法</strong>（英语：greedyalgorithm），又称<strong>贪婪算法</strong>，是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。</p><p>贪心算法在有最优子结构的问题中尤为有效。最优子结构的意思是问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解。</p><p>贪心法是解决问题的一种策略。如果策略正确，那么贪心法往往是易于描述、易于实现的。</p><h1 id="经典问题">经典问题</h1><h2 id="背包相关问题">1.背包相关问题</h2><h3 id="最优装载问题部分背包问题">最优装载问题/部分背包问题</h3><p>此类问题较简单，按题意逐步选择最优解即可。</p><h3 id="乘船问题">乘船问题</h3><p>有n个人，第<span class="math inline">\(i\)</span>个人重量为<spanclass="math inline">\(wi\)</span>。每艘船的最大载重量均为<spanclass="math inline">\(C\)</span>，且最多只能乘两个人。用最少的船装载所有人。</p><p>【分析】考虑最轻的人<spanclass="math inline">\(i\)</span>，他应该和谁一起坐呢？如果每个人都无法和他一起坐船， 则唯一的方案就是每人坐一艘船。否则，他应该选择能和他一起坐船的人中最重的一个<spanclass="math inline">\(j\)</span>。这个贪心策略是对的，可以用反证法证明。</p><p><ahref="https://www.notion.so/https-www-luogu-com-cn-problem-P1094-d7ce7a0882464a6eaf90844c8b42eac9?pvs=21">上实战：[https://www.luogu.com.cn/problem/P1094](https://www.luogu.com.cn/problem/P1094)</a></p><h2 id="区间相关问题">2.区间相关问题</h2><h3 id="选择不相交区间">选择不相交区间</h3><p>数轴上有n个开区间<spanclass="math inline">\((a,b)\)</span>。选择尽量多个区间，使得这些区间两两没有公共点。</p><p>【分析】</p><p>1.小区间被大区间包含，这种情况下一定不会选大区间。</p><p>2.排除情况一，对右端点进行从小到大排序，然后依次遍历，如果能选进来就选。</p><h3 id="区间选点问题">区间选点问题</h3><p>数轴上有n个闭区间<spanclass="math inline">\([ai,bi]\)</span>。取尽量少的点，使得每个区间内都至少有一个点（不同区间内含的点可以是同一个）。</p><p>【分析】</p><p>1.小区间被满足时大区一定也被满足，所以在区间包含的情况下，大区间不需要考虑。</p><p>2.把区间按<span class="math inline">\(b\)</span>从小到大的顺序（<spanclass="math inline">\(b\)</span>相同时<spanclass="math inline">\(a\)</span>从大到小排序），取第一个区间的最后一个点。因为最后一个点和中间的点相比被满足的区间增加了，而且原来满足的区间现在一定也满足。</p><p><img src="img/blog/tamxin/1.png" /></p><h3 id="区间覆盖问题">区间覆盖问题</h3><p>数轴上有n个闭区间<spanclass="math inline">\([ai,bi]\)</span>，选择尽量少的区间覆盖一条指定的线段<spanclass="math inline">\([s,t]\)</span>。</p><p>【分析】</p><p>1.由于再区间<spanclass="math inline">\([s,t]\)</span>外的部分毫无意义，所以不必考虑这些部分。再区间[<spanclass="math inline">\(s,t]\)</span>的范围内，显然被大区间包含的小区间不应该考虑。</p><p>2.把各区间按<spanclass="math inline">\(a\)</span>从小到大的顺序排序。如果排在第一个的区间的起点不是<spanclass="math inline">\(s\)</span>，无解。否则选择起点在<spanclass="math inline">\(s\)</span>的最长区间（即从<spanclass="math inline">\(s\)</span>开始覆盖区间[<spanclass="math inline">\(s,t]\)</span>的求最大范围的区间）。选择区间<spanclass="math inline">\([ai,bi]\)</span>后，新的起点应该为<spanclass="math inline">\(bi\)</span>，重复先前操作。</p><p><img src="img/blog/tamxin/2.png" /></p><h2 id="huffman编码">3.Huffman编码</h2><p>假设某文件只有6种字符：a，b，c，d，e，f，可以用3个二进制位来表示，如表。</p><table><thead><tr><th>字符</th><th>a</th><th>b</th><th>c</th><th>d</th><th>e</th><th>f</th></tr></thead><tbody><tr><td>频率</td><td>45</td><td>13</td><td>12</td><td>16</td><td>9</td><td>5</td></tr><tr><td>编码</td><td>000</td><td>001</td><td>010</td><td>011</td><td>100</td><td>101</td></tr></tbody></table><p>这样，一共需要（45+13+12+16+9+5）*3=300比特。</p><p>接下来我们用 <strong><em>变长码</em> 。</strong></p><table><thead><tr><th>字符</th><th>a</th><th>b</th><th>c</th><th>d</th><th>e</th><th>f</th></tr></thead><tbody><tr><td>频率</td><td>45</td><td>13</td><td>12</td><td>16</td><td>9</td><td>5</td></tr><tr><td>编码</td><td>0</td><td>101</td><td>100</td><td>111</td><td>1101</td><td>1100</td></tr></tbody></table><p>总长度为1<em>45+3</em>13+3<em>12+3</em>16+4<em>9+4</em>5=224比特，比<strong><em>定码</em></strong> 短。</p><p>下表是<del>错误的变长码</del>。</p><table><thead><tr><th>字符</th><th>a</th><th>b</th><th>c</th><th>d</th><th>e</th><th>f</th></tr></thead><tbody><tr><td>频率</td><td>45</td><td>13</td><td>12</td><td>16</td><td>9</td><td>5</td></tr><tr><td>编码</td><td>0</td><td>1</td><td>00</td><td>01</td><td>10</td><td>11</td></tr></tbody></table><p>虽然总长度只有142比特，但是很可惜，这种编码方式有问题。假设我们接收到001，那么我们无法判断他到底是aab、cb还是ad。也就是说，这种编码方式会造成歧义，因为其中一个字符的编码是另一个字符编码的前缀。这里把满足这种性质的编码成为前缀码（PrefiixCode）。下面我们来正式叙述编码问题。</p><h3 id="最优编码问题">最优编码问题</h3><p>给出n个字符的频率<spanclass="math inline">\(ci\)</span>，给每一个字符赋予一个01编码串，使得每一个字符的编码不是另一个字符编码的前缀，而且编码后占用的空间（每个字符的频率*该字符编码长度）尽可能小。</p><p>【分析】在解决这个问题之前，首先来看一个结论：任何一个前缀编码都可以表示成每个非叶节点恰好有两个子节点的二叉树。如图，每个非叶节点与左子节点的边上写上1，与右节点的边上写上0。</p><p>每个叶子对应一个字符，编码为从根节点到该叶子的路径上的01序列。如图，N的编码为001，E的编码为11。为了证明在一般情况下，都可以用这样的二叉树来表示最优前缀码，需要证明两个结论。</p><p><img src="img/blog/tamxin/3.png" /></p><ul><li>结论1：n个叶子的二叉树一定对应一个前缀码。如果编码<spanclass="math inline">\(a\)</span>为编码<spanclass="math inline">\(b\)</span>的前缀，则<spanclass="math inline">\(a\)</span>所对应的节点一定为<spanclass="math inline">\(b\)</span>所对应的节点的祖先。而两个叶子不会有祖先后代的关系。</li><li>结论2：最优前缀码定可以写成二义树。逐个字符构造即可。每拿到一个编码，都可构造出从根到叶子的一条路径，沿着已有结点走，创建不存在的结点。这样得到的二叉树不可能有单子结点，因为如果存在，只要用这个子结点代替父结点，得到的仍然是前缀码，且总长度更短。</li></ul><p>接下来的问题就变成：如何构造出一颗最优的编码树。</p><h3 id="huffman算法"><strong>Huffman算法</strong></h3><p>把每个字符看作一个单节点子树放在一个树集合中，每棵子树的权值等于相应字符的频率。每次取权值最小的两棵子树合并成一棵新树，并重新放到集合中。新树的权值等于两棵子树权值之和。</p><p>下面分两步证明算法的正确性。</p><ul><li><p>结论1：设<span class="math inline">\(x\)</span>和<spanclass="math inline">\(y\)</span>是频率最小的两个字符，则存在前缀码使得x和y具有相同码长，且仅有最后一位编码不同。换句话说，<strong>第一步贪心法选择保留最优解</strong>。</p><p>证明：假设深度最大的节点为<spanclass="math inline">\(a\)</span>,则<spanclass="math inline">\(a\)</span>一定有一个兄弟<spanclass="math inline">\(b\)</span>。不妨设<spanclass="math inline">\(f(x)≤f(y)\)</span>，<spanclass="math inline">\(f(a)≤f(b)\)</span>，则<spanclass="math inline">\(f(x)≤f(a)\)</span>，<spanclass="math inline">\(f(y)≤f(b)\)</span>。如果<spanclass="math inline">\(x\)</span>不是<spanclass="math inline">\(a\)</span>，则交换<spanclass="math inline">\(x\)</span>和<spanclass="math inline">\(a\)</span>；如果<spanclass="math inline">\(y\)</span>不是<spanclass="math inline">\(b\)</span>,则交换<spanclass="math inline">\(y\)</span>和<spanclass="math inline">\(b\)</span>。这样得到的新编码树不会比原来的差。</p></li><li><p>结论2：设<span class="math inline">\(T\)</span>是加权字符集<spanclass="math inline">\(C\)</span>的最优编码树，<spanclass="math inline">\(x\)</span>和<spanclass="math inline">\(y\)</span>是树<spanclass="math inline">\(T\)</span>中两个叶子，且互为兄弟节点，<spanclass="math inline">\(z\)</span>是它们的父节点。若把<spanclass="math inline">\(z\)</span>看成具有频率<spanclass="math inline">\(f(z)=f(x)+f(y)\)</span>的字符，则树<spanclass="math inline">\(T&#39;=T-｛x,y｝\)</span>是字符集<spanclass="math inline">\(C&#39;=C-｛x,y｝∪｛z｝\)</span>的一棵最有编码树。换句话说，<strong>原问题的最优解包含子问题的最优解</strong>。</p><p>证明：设<span class="math inline">\(T&#39;\)</span>的编码长度为<spanclass="math inline">\(L\)</span>，其中字符<spanclass="math inline">\(｛x,y｝\)</span>拆成2个后，长度变为<spanclass="math inline">\(L-(f(x)+f(y))*h+(f(x)+f(y))*(h+1)=l+f(x)+f(y)\)</span>。因此<spanclass="math inline">\(T&#39;\)</span>必须是<spanclass="math inline">\(C&#39;\)</span>的最优编码树，<spanclass="math inline">\(T\)</span>才是<spanclass="math inline">\(C\)</span>的最优编码树。</p></li></ul><p>结论1通常称为贪心选择的性质，结论2常称为最优子结构性质。根据这两个结论，Huffman算法正确。在程序的实现上，可以先按频率把所有字符排序成表<spanclass="math inline">\(P\)</span>，然后创建一个新节点队列<spanclass="math inline">\(Q\)</span>，在每次合并两个节点后把新节点放在队列<spanclass="math inline">\(Q\)</span>中。由于后合并的频率和一定比先合并的频率和大，因此<spanclass="math inline">\(Q\)</span>内的元素是有序的。类似有序表的合并过程，每次只需要检查<spanclass="math inline">\(P\)</span>和<spanclass="math inline">\(Q\)</span>的首元素即可找到最小的元素，时间复杂度为<spanclass="math inline">\(O(n)\)</span>。算上排序，总时间复杂度为<spanclass="math inline">\(O(n logn)\)</span>。</p><h1 id="核心思想">核心思想</h1><p>贪心算法的核心在于将全局最优解分解为局部最优解，但是很多时候容易过早做出决定，从而无法达到最优解。这些问题往往比较考察思维能力，判断局部最优解能否达到全局最优解尤为重要。</p><h1 id="常见方法">常见方法</h1><h2 id="排序解法">1.排序解法</h2><p>用排序法常见的情况是输入一个包含几个（一般一到两个）权值的数组，通过排序然后遍历模拟计算的方法求出最优值。</p><h2 id="后悔解法">2.后悔解法</h2><p>思路是无论当前的选项是否最优都接受，然后进行比较，如果选择之后不是最优了，则反悔，舍弃掉这个选项；否则，正式接受。如此往复。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
